#!/bin/bash

# Script de Deploy para Hostinger
# Execute este script para preparar os arquivos para upload

echo "üöÄ Iniciando processo de deploy..."

# Limpar builds anteriores
echo "üßπ Limpando builds anteriores..."
rm -rf build/
rm -rf backend/logs/

# Instalar depend√™ncias do frontend
echo "üì¶ Instalando depend√™ncias do frontend..."
yarn install

# Instalar depend√™ncias do backend
echo "üì¶ Instalando depend√™ncias do backend..."
cd backend
yarn install
cd ..

# Build do frontend para produ√ß√£o
echo "üèóÔ∏è Construindo frontend para produ√ß√£o..."
REACT_APP_API_URL="https://report.thiagoriva.com/api" yarn build

# Criar estrutura de deploy
echo "üìÅ Criando estrutura de deploy..."
mkdir -p deploy/public_html
mkdir -p deploy/api
mkdir -p deploy/api/database
mkdir -p deploy/api/logs

# Copiar arquivos do frontend (build)
echo "üìã Copiando arquivos do frontend..."
cp -r build/* deploy/public_html/

# Copiar arquivos do backend
echo "üìã Copiando arquivos do backend..."
cp backend/server.js deploy/api/
cp backend/config.js deploy/api/
cp -r backend/database deploy/api/
cp backend/package.json deploy/api/
cp backend/yarn.lock deploy/api/
cp backend/ecosystem.config.js deploy/api/

# Criar arquivo .htaccess para SPA (Single Page Application)
echo "‚öôÔ∏è Criando .htaccess..."
cat > deploy/public_html/.htaccess << 'EOF'
Options -MultiViews
RewriteEngine On

# Handle Angular and React Router
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^ index.html [QSA,L]

# Gzip compression
<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/xml
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/x-javascript
</IfModule>

# Browser caching
<IfModule mod_expires.c>
    ExpiresActive on
    ExpiresByType text/css "access plus 1 year"
    ExpiresByType application/javascript "access plus 1 year"
    ExpiresByType image/png "access plus 1 year"
    ExpiresByType image/jpg "access plus 1 year"
    ExpiresByType image/jpeg "access plus 1 year"
</IfModule>
EOF

# Criar arquivo de configura√ß√£o para produ√ß√£o
cat > deploy/api/config.prod.js << 'EOF'
module.exports = {
  port: process.env.PORT || 3001,
  dbPath: process.env.DB_PATH || './database/reports.db',
  corsOrigin: process.env.CORS_ORIGIN || 'https://report.thiagoriva.com',
  nodeEnv: 'production'
};
EOF

# Criar README de deploy
cat > deploy/README-DEPLOY.md << 'EOF'
# Instru√ß√µes de Deploy - Sistema de Relat√≥rios Di√°rios

## Estrutura de Arquivos

```
deploy/
‚îú‚îÄ‚îÄ public_html/          # Arquivos do frontend (React build)
‚îÇ   ‚îú‚îÄ‚îÄ index.html
‚îÇ   ‚îú‚îÄ‚îÄ static/
‚îÇ   ‚îî‚îÄ‚îÄ .htaccess
‚îî‚îÄ‚îÄ api/                  # Arquivos do backend (Node.js)
    ‚îú‚îÄ‚îÄ server.js
    ‚îú‚îÄ‚îÄ config.js
    ‚îú‚îÄ‚îÄ package.json
    ‚îú‚îÄ‚îÄ ecosystem.config.js
    ‚îî‚îÄ‚îÄ database/
```

## Passos para Deploy na Hostinger

### 1. Frontend (React)
1. Fa√ßa upload do conte√∫do da pasta `public_html/` para a pasta raiz do seu subdom√≠nio
2. Certifique-se que o arquivo `.htaccess` foi enviado

### 2. Backend (Node.js API)
1. Crie um subdiret√≥rio `api/` na raiz do seu dom√≠nio
2. Fa√ßa upload do conte√∫do da pasta `api/` para esse diret√≥rio
3. No painel da Hostinger, v√° em "Avan√ßado" > "Cron Jobs"
4. Adicione um cron job para manter a API rodando:
   ```
   */5 * * * * cd /home/usuario/public_html/api && node server.js > /dev/null 2>&1 &
   ```

### 3. Configura√ß√£o do Subdom√≠nio
1. No painel da Hostinger, v√° em "Dom√≠nios" > "Subdom√≠nios"
2. Crie um subdom√≠nio (ex: `relatorios.seudominio.com.br`)
3. Aponte para a pasta onde voc√™ fez upload dos arquivos

### 4. Banco de Dados
- O SQLite ser√° criado automaticamente na primeira execu√ß√£o
- O arquivo ficar√° em `api/database/reports.db`
- Fa√ßa backup regular deste arquivo

### 5. Logs
- Os logs da API ficar√£o em `api/logs/`
- Monitore regularmente para verificar erros

## URLs Finais
- Frontend: https://report.thiagoriva.com
- API: https://report.thiagoriva.com/api

## Teste
Ap√≥s o deploy, teste:
1. Acesse a URL do frontend
2. Verifique se aparece "Banco de dados conectado" na tela inicial
3. Tente criar um relat√≥rio de teste

## Manuten√ß√£o
- Para atualizar: repita o processo de build e upload
- Para backup: baixe o arquivo `api/database/reports.db`
- Para logs: verifique `api/logs/`
EOF

# Criar arquivo ZIP para upload f√°cil
echo "üì¶ Criando arquivo ZIP..."
cd deploy
zip -r ../sistema-relatorios-deploy.zip .
cd ..

echo "‚úÖ Deploy preparado com sucesso!"
echo ""
echo "üìÅ Arquivos prontos em: ./deploy/"
echo "üì¶ Arquivo ZIP: ./sistema-relatorios-deploy.zip"
echo ""
echo "üìã Pr√≥ximos passos:"
echo "1. Leia o arquivo deploy/README-DEPLOY.md"
echo "2. Configure seu subdom√≠nio na Hostinger"
echo "3. Fa√ßa upload dos arquivos"
echo "4. Teste a aplica√ß√£o"
echo ""
echo "üåê URLs ap√≥s deploy:"
echo "Frontend: https://report.thiagoriva.com"
echo "API: https://report.thiagoriva.com/api"
