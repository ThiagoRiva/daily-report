{"ast":null,"code":"var _jsxFileName = \"/home/thiagoriva/Documents/Projects/daily-report/src/context/DataContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useState } from 'react';\nimport { apiService } from '../services/api';\nimport { loadData } from '../data/seedData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext();\n\n// Tipos de ações\nconst ACTIONS = {\n  LOAD_DATA: 'LOAD_DATA',\n  ADD_ATIVIDADE: 'ADD_ATIVIDADE',\n  UPDATE_ATIVIDADE: 'UPDATE_ATIVIDADE',\n  DELETE_ATIVIDADE: 'DELETE_ATIVIDADE',\n  ADD_STATUS_TECNICO: 'ADD_STATUS_TECNICO',\n  UPDATE_STATUS_TECNICO: 'UPDATE_STATUS_TECNICO',\n  UPDATE_CLUSTER: 'UPDATE_CLUSTER',\n  ADD_CLUSTER: 'ADD_CLUSTER',\n  UPDATE_USINA: 'UPDATE_USINA',\n  ADD_USINA: 'ADD_USINA',\n  UPDATE_TECNICO: 'UPDATE_TECNICO',\n  ADD_TECNICO: 'ADD_TECNICO'\n};\n\n// Reducer para gerenciar o estado\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case ACTIONS.LOAD_DATA:\n      return action.payload;\n    case ACTIONS.ADD_ATIVIDADE:\n      const newAtividade = {\n        id: Date.now().toString(),\n        ...action.payload\n      };\n      return {\n        ...state,\n        atividades: [...state.atividades, newAtividade]\n      };\n    case ACTIONS.UPDATE_ATIVIDADE:\n      return {\n        ...state,\n        atividades: state.atividades.map(ativ => ativ.id === action.payload.id ? {\n          ...ativ,\n          ...action.payload\n        } : ativ)\n      };\n    case ACTIONS.DELETE_ATIVIDADE:\n      return {\n        ...state,\n        atividades: state.atividades.filter(ativ => ativ.id !== action.payload)\n      };\n    case ACTIONS.ADD_STATUS_TECNICO:\n      const newStatus = {\n        id: Date.now().toString(),\n        ...action.payload\n      };\n      return {\n        ...state,\n        statusTecnico: [...state.statusTecnico, newStatus]\n      };\n    case ACTIONS.UPDATE_STATUS_TECNICO:\n      return {\n        ...state,\n        statusTecnico: state.statusTecnico.map(status => status.id === action.payload.id ? {\n          ...status,\n          ...action.payload\n        } : status)\n      };\n    case ACTIONS.ADD_CLUSTER:\n      const newCluster = {\n        id: Date.now().toString(),\n        ...action.payload\n      };\n      return {\n        ...state,\n        clusters: [...state.clusters, newCluster]\n      };\n    case ACTIONS.UPDATE_CLUSTER:\n      return {\n        ...state,\n        clusters: state.clusters.map(cluster => cluster.id === action.payload.id ? {\n          ...cluster,\n          ...action.payload\n        } : cluster)\n      };\n    case ACTIONS.ADD_USINA:\n      const newUsina = {\n        id: Date.now().toString(),\n        ...action.payload\n      };\n      return {\n        ...state,\n        usinas: [...state.usinas, newUsina]\n      };\n    case ACTIONS.UPDATE_USINA:\n      return {\n        ...state,\n        usinas: state.usinas.map(usina => usina.id === action.payload.id ? {\n          ...usina,\n          ...action.payload\n        } : usina)\n      };\n    case ACTIONS.ADD_TECNICO:\n      const newTecnico = {\n        id: Date.now().toString(),\n        ...action.payload\n      };\n      return {\n        ...state,\n        tecnicos: [...state.tecnicos, newTecnico]\n      };\n    case ACTIONS.UPDATE_TECNICO:\n      return {\n        ...state,\n        tecnicos: state.tecnicos.map(tecnico => tecnico.id === action.payload.id ? {\n          ...tecnico,\n          ...action.payload\n        } : tecnico)\n      };\n    default:\n      return state;\n  }\n};\n\n// Provider do contexto\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n  const [data, dispatch] = useReducer(dataReducer, {\n    clusters: [],\n    usinas: [],\n    tecnicos: [],\n    funcoes: [],\n    atividades: [],\n    statusTecnico: []\n  });\n  const [loading, setLoading] = useState(true);\n  const [apiConnected, setApiConnected] = useState(false);\n\n  // Carregar dados na inicialização\n  useEffect(() => {\n    const loadInitialData = async () => {\n      try {\n        // Tentar conectar com a API primeiro\n        const connectionTest = await apiService.testConnection();\n        if (connectionTest.success) {\n          setApiConnected(true);\n          console.log('✅ Conectado à API - usando banco de dados');\n\n          // Carregar dados da API\n          const apiData = await apiService.getAllData();\n\n          // Transformar dados da API para formato compatível com frontend\n          const transformedData = {\n            clusters: apiData.clusters.map(c => ({\n              id: c.id.toString(),\n              nome: c.nome,\n              ativo: Boolean(c.ativo)\n            })),\n            usinas: apiData.usinas.map(u => ({\n              id: u.id.toString(),\n              nome: u.nome,\n              clusterId: u.cluster_id.toString(),\n              ativo: Boolean(u.ativo)\n            })),\n            tecnicos: apiData.tecnicos.map(t => ({\n              id: t.id.toString(),\n              nome: t.nome,\n              funcao: t.funcao,\n              ativo: Boolean(t.ativo)\n            })),\n            funcoes: apiData.funcoes.map(f => ({\n              id: f.id.toString(),\n              nome: f.nome,\n              descricao: f.descricao\n            })),\n            atividades: apiData.atividades.map(a => {\n              var _a$funcao_id;\n              return {\n                id: a.id.toString(),\n                data: a.data,\n                clusterId: a.cluster_id.toString(),\n                usinaId: a.usina_id.toString(),\n                tecnicoId: a.tecnico_id.toString(),\n                funcaoId: (_a$funcao_id = a.funcao_id) === null || _a$funcao_id === void 0 ? void 0 : _a$funcao_id.toString(),\n                tarefa: a.tarefa,\n                inicio: a.inicio,\n                fim: a.fim,\n                observacoes: a.observacoes\n              };\n            }),\n            statusTecnico: apiData.statusTecnico.map(s => ({\n              id: s.id.toString(),\n              data: s.data,\n              clusterId: s.cluster_id.toString(),\n              usinaId: s.usina_id.toString(),\n              tecnicoId: s.tecnico_id.toString(),\n              inversores: {\n                ok100: Boolean(s.inversores_ok100),\n                motivo: s.inversores_motivo || '',\n                acaoPrevista: s.inversores_acao_prevista || ''\n              },\n              strings: {\n                ok100: Boolean(s.strings_ok100),\n                motivo: s.strings_motivo || '',\n                acaoPrevista: s.strings_acao_prevista || ''\n              },\n              trackers: {\n                ok100: Boolean(s.trackers_ok100),\n                motivo: s.trackers_motivo || '',\n                acaoPrevista: s.trackers_acao_prevista || ''\n              },\n              observacoesGerais: s.observacoes_gerais || ''\n            }))\n          };\n          dispatch({\n            type: ACTIONS.LOAD_DATA,\n            payload: transformedData\n          });\n        } else {\n          setApiConnected(false);\n          console.log('⚠️ API não disponível - usando dados locais');\n\n          // Fallback para dados locais\n          const localData = loadData();\n          dispatch({\n            type: ACTIONS.LOAD_DATA,\n            payload: localData\n          });\n        }\n      } catch (error) {\n        console.error('Erro ao carregar dados:', error);\n        setApiConnected(false);\n\n        // Fallback para dados locais em caso de erro\n        const localData = loadData();\n        dispatch({\n          type: ACTIONS.LOAD_DATA,\n          payload: localData\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadInitialData();\n  }, []);\n\n  // Funções de ação\n  const addAtividade = async atividade => {\n    if (apiConnected) {\n      try {\n        // Transformar dados para formato da API\n        const apiData = {\n          data: atividade.data,\n          cluster_id: parseInt(atividade.clusterId),\n          usina_id: parseInt(atividade.usinaId),\n          tecnico_id: parseInt(atividade.tecnicoId),\n          funcao_id: atividade.funcaoId ? parseInt(atividade.funcaoId) : null,\n          tarefa: atividade.tarefa,\n          inicio: atividade.inicio,\n          fim: atividade.fim,\n          observacoes: atividade.observacoes || ''\n        };\n        await apiService.createAtividade(apiData);\n\n        // Atualizar estado local\n        dispatch({\n          type: ACTIONS.ADD_ATIVIDADE,\n          payload: atividade\n        });\n      } catch (error) {\n        console.error('Erro ao salvar atividade:', error);\n        throw error;\n      }\n    } else {\n      dispatch({\n        type: ACTIONS.ADD_ATIVIDADE,\n        payload: atividade\n      });\n    }\n  };\n  const updateAtividade = atividade => {\n    dispatch({\n      type: ACTIONS.UPDATE_ATIVIDADE,\n      payload: atividade\n    });\n  };\n  const deleteAtividade = id => {\n    dispatch({\n      type: ACTIONS.DELETE_ATIVIDADE,\n      payload: id\n    });\n  };\n  const addStatusTecnico = async status => {\n    if (apiConnected) {\n      try {\n        // Transformar dados para formato da API\n        const apiData = {\n          data: status.data,\n          cluster_id: parseInt(status.clusterId),\n          usina_id: parseInt(status.usinaId),\n          tecnico_id: parseInt(status.tecnicoId),\n          inversores_ok100: status.inversores.ok100 ? 1 : 0,\n          inversores_motivo: status.inversores.motivo || '',\n          inversores_acao_prevista: status.inversores.acaoPrevista || '',\n          strings_ok100: status.strings.ok100 ? 1 : 0,\n          strings_motivo: status.strings.motivo || '',\n          strings_acao_prevista: status.strings.acaoPrevista || '',\n          trackers_ok100: status.trackers.ok100 ? 1 : 0,\n          trackers_motivo: status.trackers.motivo || '',\n          trackers_acao_prevista: status.trackers.acaoPrevista || '',\n          observacoes_gerais: status.observacoesGerais || ''\n        };\n        await apiService.createStatusTecnico(apiData);\n\n        // Atualizar estado local\n        dispatch({\n          type: ACTIONS.ADD_STATUS_TECNICO,\n          payload: status\n        });\n      } catch (error) {\n        console.error('Erro ao salvar status técnico:', error);\n        throw error;\n      }\n    } else {\n      dispatch({\n        type: ACTIONS.ADD_STATUS_TECNICO,\n        payload: status\n      });\n    }\n  };\n  const updateStatusTecnico = status => {\n    dispatch({\n      type: ACTIONS.UPDATE_STATUS_TECNICO,\n      payload: status\n    });\n  };\n  const addCluster = async cluster => {\n    if (apiConnected) {\n      try {\n        const result = await apiService.createCluster({\n          nome: cluster.nome,\n          ativo: cluster.ativo ? 1 : 0\n        });\n        const newCluster = {\n          id: result.id.toString(),\n          nome: cluster.nome,\n          ativo: cluster.ativo\n        };\n        dispatch({\n          type: ACTIONS.ADD_CLUSTER,\n          payload: newCluster\n        });\n      } catch (error) {\n        console.error('Erro ao criar cluster:', error);\n        throw error;\n      }\n    } else {\n      dispatch({\n        type: ACTIONS.ADD_CLUSTER,\n        payload: cluster\n      });\n    }\n  };\n  const updateCluster = async cluster => {\n    if (apiConnected) {\n      try {\n        await apiService.updateCluster(cluster.id, {\n          nome: cluster.nome,\n          ativo: cluster.ativo ? 1 : 0\n        });\n        dispatch({\n          type: ACTIONS.UPDATE_CLUSTER,\n          payload: cluster\n        });\n      } catch (error) {\n        console.error('Erro ao atualizar cluster:', error);\n        throw error;\n      }\n    } else {\n      dispatch({\n        type: ACTIONS.UPDATE_CLUSTER,\n        payload: cluster\n      });\n    }\n  };\n  const addUsina = async usina => {\n    if (apiConnected) {\n      try {\n        const result = await apiService.createUsina({\n          nome: usina.nome,\n          cluster_id: parseInt(usina.clusterId),\n          ativo: usina.ativo ? 1 : 0\n        });\n        const newUsina = {\n          id: result.id.toString(),\n          nome: usina.nome,\n          clusterId: usina.clusterId,\n          ativo: usina.ativo\n        };\n        dispatch({\n          type: ACTIONS.ADD_USINA,\n          payload: newUsina\n        });\n      } catch (error) {\n        console.error('Erro ao criar usina:', error);\n        throw error;\n      }\n    } else {\n      dispatch({\n        type: ACTIONS.ADD_USINA,\n        payload: usina\n      });\n    }\n  };\n  const updateUsina = async usina => {\n    if (apiConnected) {\n      try {\n        await apiService.updateUsina(usina.id, {\n          nome: usina.nome,\n          cluster_id: parseInt(usina.clusterId),\n          ativo: usina.ativo ? 1 : 0\n        });\n        dispatch({\n          type: ACTIONS.UPDATE_USINA,\n          payload: usina\n        });\n      } catch (error) {\n        console.error('Erro ao atualizar usina:', error);\n        throw error;\n      }\n    } else {\n      dispatch({\n        type: ACTIONS.UPDATE_USINA,\n        payload: usina\n      });\n    }\n  };\n  const addTecnico = async tecnico => {\n    if (apiConnected) {\n      try {\n        const result = await apiService.createTecnico({\n          nome: tecnico.nome,\n          funcao: tecnico.funcao,\n          ativo: tecnico.ativo ? 1 : 0\n        });\n        const newTecnico = {\n          id: result.id.toString(),\n          nome: tecnico.nome,\n          funcao: tecnico.funcao,\n          ativo: tecnico.ativo\n        };\n        dispatch({\n          type: ACTIONS.ADD_TECNICO,\n          payload: newTecnico\n        });\n      } catch (error) {\n        console.error('Erro ao criar técnico:', error);\n        throw error;\n      }\n    } else {\n      dispatch({\n        type: ACTIONS.ADD_TECNICO,\n        payload: tecnico\n      });\n    }\n  };\n  const updateTecnico = async tecnico => {\n    if (apiConnected) {\n      try {\n        await apiService.updateTecnico(tecnico.id, {\n          nome: tecnico.nome,\n          funcao: tecnico.funcao,\n          ativo: tecnico.ativo ? 1 : 0\n        });\n        dispatch({\n          type: ACTIONS.UPDATE_TECNICO,\n          payload: tecnico\n        });\n      } catch (error) {\n        console.error('Erro ao atualizar técnico:', error);\n        throw error;\n      }\n    } else {\n      dispatch({\n        type: ACTIONS.UPDATE_TECNICO,\n        payload: tecnico\n      });\n    }\n  };\n  const value = {\n    data,\n    loading,\n    apiConnected,\n    addAtividade,\n    updateAtividade,\n    deleteAtividade,\n    addStatusTecnico,\n    updateStatusTecnico,\n    addCluster,\n    updateCluster,\n    addUsina,\n    updateUsina,\n    addTecnico,\n    updateTecnico\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 469,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook para usar o contexto\n_s(DataProvider, \"cDYAF84bll1vBDzVTGGCrujkW7I=\");\n_c = DataProvider;\nexport const useData = () => {\n  _s2();\n  const context = useContext(DataContext);\n  if (!context) {\n    throw new Error('useData deve ser usado dentro de um DataProvider');\n  }\n  return context;\n};\n_s2(useData, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useState","apiService","loadData","jsxDEV","_jsxDEV","DataContext","ACTIONS","LOAD_DATA","ADD_ATIVIDADE","UPDATE_ATIVIDADE","DELETE_ATIVIDADE","ADD_STATUS_TECNICO","UPDATE_STATUS_TECNICO","UPDATE_CLUSTER","ADD_CLUSTER","UPDATE_USINA","ADD_USINA","UPDATE_TECNICO","ADD_TECNICO","dataReducer","state","action","type","payload","newAtividade","id","Date","now","toString","atividades","map","ativ","filter","newStatus","statusTecnico","status","newCluster","clusters","cluster","newUsina","usinas","usina","newTecnico","tecnicos","tecnico","DataProvider","children","_s","data","dispatch","funcoes","loading","setLoading","apiConnected","setApiConnected","loadInitialData","connectionTest","testConnection","success","console","log","apiData","getAllData","transformedData","c","nome","ativo","Boolean","u","clusterId","cluster_id","t","funcao","f","descricao","a","_a$funcao_id","usinaId","usina_id","tecnicoId","tecnico_id","funcaoId","funcao_id","tarefa","inicio","fim","observacoes","s","inversores","ok100","inversores_ok100","motivo","inversores_motivo","acaoPrevista","inversores_acao_prevista","strings","strings_ok100","strings_motivo","strings_acao_prevista","trackers","trackers_ok100","trackers_motivo","trackers_acao_prevista","observacoesGerais","observacoes_gerais","localData","error","addAtividade","atividade","parseInt","createAtividade","updateAtividade","deleteAtividade","addStatusTecnico","createStatusTecnico","updateStatusTecnico","addCluster","result","createCluster","updateCluster","addUsina","createUsina","updateUsina","addTecnico","createTecnico","updateTecnico","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useData","_s2","context","Error","$RefreshReg$"],"sources":["/home/thiagoriva/Documents/Projects/daily-report/src/context/DataContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, useState } from 'react';\nimport { apiService } from '../services/api';\nimport { loadData } from '../data/seedData';\n\nconst DataContext = createContext();\n\n// Tipos de ações\nconst ACTIONS = {\n  LOAD_DATA: 'LOAD_DATA',\n  ADD_ATIVIDADE: 'ADD_ATIVIDADE',\n  UPDATE_ATIVIDADE: 'UPDATE_ATIVIDADE',\n  DELETE_ATIVIDADE: 'DELETE_ATIVIDADE',\n  ADD_STATUS_TECNICO: 'ADD_STATUS_TECNICO',\n  UPDATE_STATUS_TECNICO: 'UPDATE_STATUS_TECNICO',\n  UPDATE_CLUSTER: 'UPDATE_CLUSTER',\n  ADD_CLUSTER: 'ADD_CLUSTER',\n  UPDATE_USINA: 'UPDATE_USINA',\n  ADD_USINA: 'ADD_USINA',\n  UPDATE_TECNICO: 'UPDATE_TECNICO',\n  ADD_TECNICO: 'ADD_TECNICO'\n};\n\n// Reducer para gerenciar o estado\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case ACTIONS.LOAD_DATA:\n      return action.payload;\n    \n    case ACTIONS.ADD_ATIVIDADE:\n      const newAtividade = {\n        id: Date.now().toString(),\n        ...action.payload\n      };\n      return {\n        ...state,\n        atividades: [...state.atividades, newAtividade]\n      };\n    \n    case ACTIONS.UPDATE_ATIVIDADE:\n      return {\n        ...state,\n        atividades: state.atividades.map(ativ => \n          ativ.id === action.payload.id ? { ...ativ, ...action.payload } : ativ\n        )\n      };\n    \n    case ACTIONS.DELETE_ATIVIDADE:\n      return {\n        ...state,\n        atividades: state.atividades.filter(ativ => ativ.id !== action.payload)\n      };\n    \n    case ACTIONS.ADD_STATUS_TECNICO:\n      const newStatus = {\n        id: Date.now().toString(),\n        ...action.payload\n      };\n      return {\n        ...state,\n        statusTecnico: [...state.statusTecnico, newStatus]\n      };\n    \n    case ACTIONS.UPDATE_STATUS_TECNICO:\n      return {\n        ...state,\n        statusTecnico: state.statusTecnico.map(status => \n          status.id === action.payload.id ? { ...status, ...action.payload } : status\n        )\n      };\n    \n    case ACTIONS.ADD_CLUSTER:\n      const newCluster = {\n        id: Date.now().toString(),\n        ...action.payload\n      };\n      return {\n        ...state,\n        clusters: [...state.clusters, newCluster]\n      };\n    \n    case ACTIONS.UPDATE_CLUSTER:\n      return {\n        ...state,\n        clusters: state.clusters.map(cluster => \n          cluster.id === action.payload.id ? { ...cluster, ...action.payload } : cluster\n        )\n      };\n    \n    case ACTIONS.ADD_USINA:\n      const newUsina = {\n        id: Date.now().toString(),\n        ...action.payload\n      };\n      return {\n        ...state,\n        usinas: [...state.usinas, newUsina]\n      };\n    \n    case ACTIONS.UPDATE_USINA:\n      return {\n        ...state,\n        usinas: state.usinas.map(usina => \n          usina.id === action.payload.id ? { ...usina, ...action.payload } : usina\n        )\n      };\n    \n    case ACTIONS.ADD_TECNICO:\n      const newTecnico = {\n        id: Date.now().toString(),\n        ...action.payload\n      };\n      return {\n        ...state,\n        tecnicos: [...state.tecnicos, newTecnico]\n      };\n    \n    case ACTIONS.UPDATE_TECNICO:\n      return {\n        ...state,\n        tecnicos: state.tecnicos.map(tecnico => \n          tecnico.id === action.payload.id ? { ...tecnico, ...action.payload } : tecnico\n        )\n      };\n    \n    default:\n      return state;\n  }\n};\n\n// Provider do contexto\nexport const DataProvider = ({ children }) => {\n  const [data, dispatch] = useReducer(dataReducer, {\n    clusters: [],\n    usinas: [],\n    tecnicos: [],\n    funcoes: [],\n    atividades: [],\n    statusTecnico: []\n  });\n\n  const [loading, setLoading] = useState(true);\n  const [apiConnected, setApiConnected] = useState(false);\n\n  // Carregar dados na inicialização\n  useEffect(() => {\n    const loadInitialData = async () => {\n      try {\n        // Tentar conectar com a API primeiro\n        const connectionTest = await apiService.testConnection();\n        \n        if (connectionTest.success) {\n          setApiConnected(true);\n          console.log('✅ Conectado à API - usando banco de dados');\n          \n          // Carregar dados da API\n          const apiData = await apiService.getAllData();\n          \n          // Transformar dados da API para formato compatível com frontend\n          const transformedData = {\n            clusters: apiData.clusters.map(c => ({\n              id: c.id.toString(),\n              nome: c.nome,\n              ativo: Boolean(c.ativo)\n            })),\n            usinas: apiData.usinas.map(u => ({\n              id: u.id.toString(),\n              nome: u.nome,\n              clusterId: u.cluster_id.toString(),\n              ativo: Boolean(u.ativo)\n            })),\n            tecnicos: apiData.tecnicos.map(t => ({\n              id: t.id.toString(),\n              nome: t.nome,\n              funcao: t.funcao,\n              ativo: Boolean(t.ativo)\n            })),\n            funcoes: apiData.funcoes.map(f => ({\n              id: f.id.toString(),\n              nome: f.nome,\n              descricao: f.descricao\n            })),\n            atividades: apiData.atividades.map(a => ({\n              id: a.id.toString(),\n              data: a.data,\n              clusterId: a.cluster_id.toString(),\n              usinaId: a.usina_id.toString(),\n              tecnicoId: a.tecnico_id.toString(),\n              funcaoId: a.funcao_id?.toString(),\n              tarefa: a.tarefa,\n              inicio: a.inicio,\n              fim: a.fim,\n              observacoes: a.observacoes\n            })),\n            statusTecnico: apiData.statusTecnico.map(s => ({\n              id: s.id.toString(),\n              data: s.data,\n              clusterId: s.cluster_id.toString(),\n              usinaId: s.usina_id.toString(),\n              tecnicoId: s.tecnico_id.toString(),\n              inversores: {\n                ok100: Boolean(s.inversores_ok100),\n                motivo: s.inversores_motivo || '',\n                acaoPrevista: s.inversores_acao_prevista || ''\n              },\n              strings: {\n                ok100: Boolean(s.strings_ok100),\n                motivo: s.strings_motivo || '',\n                acaoPrevista: s.strings_acao_prevista || ''\n              },\n              trackers: {\n                ok100: Boolean(s.trackers_ok100),\n                motivo: s.trackers_motivo || '',\n                acaoPrevista: s.trackers_acao_prevista || ''\n              },\n              observacoesGerais: s.observacoes_gerais || ''\n            }))\n          };\n          \n          dispatch({ type: ACTIONS.LOAD_DATA, payload: transformedData });\n        } else {\n          setApiConnected(false);\n          console.log('⚠️ API não disponível - usando dados locais');\n          \n          // Fallback para dados locais\n          const localData = loadData();\n          dispatch({ type: ACTIONS.LOAD_DATA, payload: localData });\n        }\n      } catch (error) {\n        console.error('Erro ao carregar dados:', error);\n        setApiConnected(false);\n        \n        // Fallback para dados locais em caso de erro\n        const localData = loadData();\n        dispatch({ type: ACTIONS.LOAD_DATA, payload: localData });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadInitialData();\n  }, []);\n\n  // Funções de ação\n  const addAtividade = async (atividade) => {\n    if (apiConnected) {\n      try {\n        // Transformar dados para formato da API\n        const apiData = {\n          data: atividade.data,\n          cluster_id: parseInt(atividade.clusterId),\n          usina_id: parseInt(atividade.usinaId),\n          tecnico_id: parseInt(atividade.tecnicoId),\n          funcao_id: atividade.funcaoId ? parseInt(atividade.funcaoId) : null,\n          tarefa: atividade.tarefa,\n          inicio: atividade.inicio,\n          fim: atividade.fim,\n          observacoes: atividade.observacoes || ''\n        };\n        \n        await apiService.createAtividade(apiData);\n        \n        // Atualizar estado local\n        dispatch({ type: ACTIONS.ADD_ATIVIDADE, payload: atividade });\n      } catch (error) {\n        console.error('Erro ao salvar atividade:', error);\n        throw error;\n      }\n    } else {\n      dispatch({ type: ACTIONS.ADD_ATIVIDADE, payload: atividade });\n    }\n  };\n\n  const updateAtividade = (atividade) => {\n    dispatch({ type: ACTIONS.UPDATE_ATIVIDADE, payload: atividade });\n  };\n\n  const deleteAtividade = (id) => {\n    dispatch({ type: ACTIONS.DELETE_ATIVIDADE, payload: id });\n  };\n\n  const addStatusTecnico = async (status) => {\n    if (apiConnected) {\n      try {\n        // Transformar dados para formato da API\n        const apiData = {\n          data: status.data,\n          cluster_id: parseInt(status.clusterId),\n          usina_id: parseInt(status.usinaId),\n          tecnico_id: parseInt(status.tecnicoId),\n          inversores_ok100: status.inversores.ok100 ? 1 : 0,\n          inversores_motivo: status.inversores.motivo || '',\n          inversores_acao_prevista: status.inversores.acaoPrevista || '',\n          strings_ok100: status.strings.ok100 ? 1 : 0,\n          strings_motivo: status.strings.motivo || '',\n          strings_acao_prevista: status.strings.acaoPrevista || '',\n          trackers_ok100: status.trackers.ok100 ? 1 : 0,\n          trackers_motivo: status.trackers.motivo || '',\n          trackers_acao_prevista: status.trackers.acaoPrevista || '',\n          observacoes_gerais: status.observacoesGerais || ''\n        };\n        \n        await apiService.createStatusTecnico(apiData);\n        \n        // Atualizar estado local\n        dispatch({ type: ACTIONS.ADD_STATUS_TECNICO, payload: status });\n      } catch (error) {\n        console.error('Erro ao salvar status técnico:', error);\n        throw error;\n      }\n    } else {\n      dispatch({ type: ACTIONS.ADD_STATUS_TECNICO, payload: status });\n    }\n  };\n\n  const updateStatusTecnico = (status) => {\n    dispatch({ type: ACTIONS.UPDATE_STATUS_TECNICO, payload: status });\n  };\n\n  const addCluster = async (cluster) => {\n    if (apiConnected) {\n      try {\n        const result = await apiService.createCluster({\n          nome: cluster.nome,\n          ativo: cluster.ativo ? 1 : 0\n        });\n        \n        const newCluster = {\n          id: result.id.toString(),\n          nome: cluster.nome,\n          ativo: cluster.ativo\n        };\n        \n        dispatch({ type: ACTIONS.ADD_CLUSTER, payload: newCluster });\n      } catch (error) {\n        console.error('Erro ao criar cluster:', error);\n        throw error;\n      }\n    } else {\n      dispatch({ type: ACTIONS.ADD_CLUSTER, payload: cluster });\n    }\n  };\n\n  const updateCluster = async (cluster) => {\n    if (apiConnected) {\n      try {\n        await apiService.updateCluster(cluster.id, {\n          nome: cluster.nome,\n          ativo: cluster.ativo ? 1 : 0\n        });\n        \n        dispatch({ type: ACTIONS.UPDATE_CLUSTER, payload: cluster });\n      } catch (error) {\n        console.error('Erro ao atualizar cluster:', error);\n        throw error;\n      }\n    } else {\n      dispatch({ type: ACTIONS.UPDATE_CLUSTER, payload: cluster });\n    }\n  };\n\n  const addUsina = async (usina) => {\n    if (apiConnected) {\n      try {\n        const result = await apiService.createUsina({\n          nome: usina.nome,\n          cluster_id: parseInt(usina.clusterId),\n          ativo: usina.ativo ? 1 : 0\n        });\n        \n        const newUsina = {\n          id: result.id.toString(),\n          nome: usina.nome,\n          clusterId: usina.clusterId,\n          ativo: usina.ativo\n        };\n        \n        dispatch({ type: ACTIONS.ADD_USINA, payload: newUsina });\n      } catch (error) {\n        console.error('Erro ao criar usina:', error);\n        throw error;\n      }\n    } else {\n      dispatch({ type: ACTIONS.ADD_USINA, payload: usina });\n    }\n  };\n\n  const updateUsina = async (usina) => {\n    if (apiConnected) {\n      try {\n        await apiService.updateUsina(usina.id, {\n          nome: usina.nome,\n          cluster_id: parseInt(usina.clusterId),\n          ativo: usina.ativo ? 1 : 0\n        });\n        \n        dispatch({ type: ACTIONS.UPDATE_USINA, payload: usina });\n      } catch (error) {\n        console.error('Erro ao atualizar usina:', error);\n        throw error;\n      }\n    } else {\n      dispatch({ type: ACTIONS.UPDATE_USINA, payload: usina });\n    }\n  };\n\n  const addTecnico = async (tecnico) => {\n    if (apiConnected) {\n      try {\n        const result = await apiService.createTecnico({\n          nome: tecnico.nome,\n          funcao: tecnico.funcao,\n          ativo: tecnico.ativo ? 1 : 0\n        });\n        \n        const newTecnico = {\n          id: result.id.toString(),\n          nome: tecnico.nome,\n          funcao: tecnico.funcao,\n          ativo: tecnico.ativo\n        };\n        \n        dispatch({ type: ACTIONS.ADD_TECNICO, payload: newTecnico });\n      } catch (error) {\n        console.error('Erro ao criar técnico:', error);\n        throw error;\n      }\n    } else {\n      dispatch({ type: ACTIONS.ADD_TECNICO, payload: tecnico });\n    }\n  };\n\n  const updateTecnico = async (tecnico) => {\n    if (apiConnected) {\n      try {\n        await apiService.updateTecnico(tecnico.id, {\n          nome: tecnico.nome,\n          funcao: tecnico.funcao,\n          ativo: tecnico.ativo ? 1 : 0\n        });\n        \n        dispatch({ type: ACTIONS.UPDATE_TECNICO, payload: tecnico });\n      } catch (error) {\n        console.error('Erro ao atualizar técnico:', error);\n        throw error;\n      }\n    } else {\n      dispatch({ type: ACTIONS.UPDATE_TECNICO, payload: tecnico });\n    }\n  };\n\n  const value = {\n    data,\n    loading,\n    apiConnected,\n    addAtividade,\n    updateAtividade,\n    deleteAtividade,\n    addStatusTecnico,\n    updateStatusTecnico,\n    addCluster,\n    updateCluster,\n    addUsina,\n    updateUsina,\n    addTecnico,\n    updateTecnico\n  };\n\n  return (\n    <DataContext.Provider value={value}>\n      {children}\n    </DataContext.Provider>\n  );\n};\n\n// Hook para usar o contexto\nexport const useData = () => {\n  const context = useContext(DataContext);\n  if (!context) {\n    throw new Error('useData deve ser usado dentro de um DataProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}