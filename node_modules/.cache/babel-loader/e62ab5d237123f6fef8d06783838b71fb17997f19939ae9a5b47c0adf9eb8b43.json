{"ast":null,"code":"import { format } from 'date-fns';\n\n// Gerar relatório diário de atividades\nexport const generateDailyReportWhatsApp = ({\n  cluster,\n  data,\n  tecnico,\n  usina,\n  atividades,\n  tcuComFalha,\n  observacoesGerais\n}) => {\n  const dataFormatada = format(new Date(data), 'dd/MM/yyyy');\n\n  // Gerar linhas de atividades numeradas\n  const linhasAtividades = atividades.map((atividade, index) => {\n    const inicio = atividade.inicio || '--:--';\n    const fim = atividade.fim || '--:--';\n    const usinaInfo = atividade.usinaName && usina === 'Múltiplas Usinas' ? ` (${atividade.usinaName})` : '';\n    return `${index + 1}) ${atividade.tarefa}${usinaInfo} – ⏰ ${inicio}/${fim}`;\n  }).join('\\n');\n\n  // Gerar observações\n  const observacoes = observacoesGerais.trim() || '-';\n\n  // Gerar status de TCU\n  let statusTCU = 'NÃO';\n  if (tcuComFalha.tem && tcuComFalha.falhas.length > 0) {\n    const falhasTexto = tcuComFalha.falhas.filter(falha => falha.skid || falha.tracker).map(falha => {\n      const partes = [];\n      if (falha.skid) partes.push(`Skid: ${falha.skid}`);\n      if (falha.tracker) partes.push(`Tracker: ${falha.tracker}`);\n      return partes.join(' - ');\n    }).join(', ');\n    statusTCU = falhasTexto ? `SIM – ${falhasTexto}` : 'SIM';\n  }\n  return `🔆 *Relatório Diário ${cluster} – ${dataFormatada}*\n👷 Equipe: ${tecnico}\n📍 Usina: ${usina}\n\n🔧 *Atividades Programadas*\n${linhasAtividades}\n\n📌 *Observações*\n${observacoes}\n\n⚡ *TCU com falha*\n${statusTCU}`;\n};\n\n// Gerar status técnico por usina\nexport const generateTechnicalStatusWhatsApp = ({\n  usina,\n  data,\n  cluster,\n  tecnico,\n  inversores,\n  strings,\n  trackers,\n  observacoesGerais\n}) => {\n  const dataFormatada = format(new Date(data), 'dd/MM/yyyy');\n\n  // Função auxiliar para gerar status de subsistema\n  const gerarStatusSubsistema = (subsistema, nome) => {\n    const status = subsistema.ok100 ? 'SIM' : 'NÃO';\n    let detalhes = '';\n    if (!subsistema.ok100 && (subsistema.motivo || subsistema.acaoPrevista)) {\n      const partes = [];\n      if (subsistema.motivo) partes.push(`Motivo: ${subsistema.motivo}`);\n      if (subsistema.acaoPrevista) partes.push(`Ação: ${subsistema.acaoPrevista}`);\n      detalhes = `\\n${partes.join('. ')}`;\n    }\n    return `🔧 *${nome}*: ${status}${detalhes}`;\n  };\n  const observacoes = observacoesGerais.trim() || '-';\n  return `📍 *${usina}* – ${dataFormatada} – ${cluster}\n👷 Técnico: ${tecnico}\n\n${gerarStatusSubsistema(inversores, 'Inversores')}\n\n${gerarStatusSubsistema(strings, 'Strings')}\n\n${gerarStatusSubsistema(trackers, 'Trackers')}\n\n📝 Observações: ${observacoes}`;\n};\n\n// Gerar status técnico consolidado por cluster\nexport const generateConsolidatedTechnicalStatusWhatsApp = (statusTecnicoArray, cluster, data) => {\n  const dataFormatada = format(new Date(data), 'dd/MM/yyyy');\n  const blocosPorUsina = statusTecnicoArray.map(status => generateTechnicalStatusWhatsApp(status)).join('\\n\\n');\n  return `🗂️ *Status Técnico – ${cluster} – ${dataFormatada}*\n\n${blocosPorUsina}`;\n};\n\n// Função auxiliar para formatar data\nexport const formatDateForWhatsApp = date => {\n  return format(new Date(date), 'dd/MM/yyyy');\n};\n\n// Gerar relatório diário consolidado de todos os clusters\nexport const generateConsolidatedDailyReportWhatsApp = (data, clustersComRelatorios, allData) => {\n  const dataFormatada = format(new Date(data), 'dd/MM/yyyy');\n  let message = `📋 *Relatório Diário Consolidado – ${dataFormatada}*\\n\\n`;\n\n  // Ordenar clusters por nome\n  const clustersOrdenados = clustersComRelatorios.sort((a, b) => a.cluster.nome.localeCompare(b.cluster.nome));\n  clustersOrdenados.forEach((clusterData, clusterIndex) => {\n    const {\n      cluster,\n      atividades\n    } = clusterData;\n\n    // Separador entre clusters (exceto o primeiro)\n    if (clusterIndex > 0) {\n      message += '\\n' + '─'.repeat(40) + '\\n\\n';\n    }\n    message += `🔆 *${cluster.nome.toUpperCase()}*\\n`;\n\n    // Buscar todos os técnicos únicos do cluster\n    const tecnicosDoCluster = new Set();\n    atividades.forEach(atividade => {\n      tecnicosDoCluster.add(atividade.tecnicoId);\n    });\n    const nomesTecnicos = Array.from(tecnicosDoCluster).map(tecnicoId => {\n      const tecnico = allData.tecnicos.find(t => t.id === tecnicoId);\n      return (tecnico === null || tecnico === void 0 ? void 0 : tecnico.nome) || 'Técnico Desconhecido';\n    }).join(' / ');\n    message += `👷 Equipe: ${nomesTecnicos}\\n`;\n\n    // Agrupar atividades por usina\n    const atividadesPorUsina = {};\n    atividades.forEach(atividade => {\n      const usina = allData.usinas.find(u => u.id === atividade.usinaId);\n      const usinaName = (usina === null || usina === void 0 ? void 0 : usina.nome) || 'Usina Desconhecida';\n      if (!atividadesPorUsina[usinaName]) {\n        atividadesPorUsina[usinaName] = [];\n      }\n      atividadesPorUsina[usinaName].push(atividade);\n    });\n\n    // Listar atividades por usina (sem separação por técnico)\n    Object.keys(atividadesPorUsina).forEach(usinaName => {\n      message += `\\n📍 *${usinaName}*\\n`;\n\n      // Consolidar todas as atividades da usina (sem duplicatas)\n      const atividadesUnicas = [];\n      const atividadesVistas = new Set();\n      atividadesPorUsina[usinaName].forEach(atividade => {\n        const chave = `${atividade.tarefa}-${atividade.inicio}-${atividade.fim}`;\n        if (!atividadesVistas.has(chave)) {\n          atividadesVistas.add(chave);\n          atividadesUnicas.push(atividade);\n        }\n      });\n\n      // Ordenar por horário e numerar\n      atividadesUnicas.sort((a, b) => a.inicio.localeCompare(b.inicio)).forEach((atividade, index) => {\n        const inicio = atividade.inicio || '--:--';\n        const fim = atividade.fim || '--:--';\n        message += `${index + 1}) ${atividade.tarefa} – ⏰ ${inicio}/${fim}\\n`;\n      });\n    });\n  });\n  return message.trim();\n};\n\n// Função auxiliar para validar dados antes de gerar mensagem\nexport const validateDataForWhatsApp = (data, type) => {\n  const errors = [];\n  if (!data.cluster) errors.push('Cluster é obrigatório');\n  if (!data.data) errors.push('Data é obrigatória');\n  if (!data.usina) errors.push('Usina é obrigatória');\n  if (!data.tecnico) errors.push('Técnico é obrigatório');\n  if (type === 'daily' && (!data.atividades || data.atividades.length === 0)) {\n    errors.push('Pelo menos uma atividade é obrigatória');\n  }\n  if (type === 'technical' && (!data.inversores || !data.strings || !data.trackers)) {\n    errors.push('Status de todos os subsistemas é obrigatório');\n  }\n  return errors;\n};","map":{"version":3,"names":["format","generateDailyReportWhatsApp","cluster","data","tecnico","usina","atividades","tcuComFalha","observacoesGerais","dataFormatada","Date","linhasAtividades","map","atividade","index","inicio","fim","usinaInfo","usinaName","tarefa","join","observacoes","trim","statusTCU","tem","falhas","length","falhasTexto","filter","falha","skid","tracker","partes","push","generateTechnicalStatusWhatsApp","inversores","strings","trackers","gerarStatusSubsistema","subsistema","nome","status","ok100","detalhes","motivo","acaoPrevista","generateConsolidatedTechnicalStatusWhatsApp","statusTecnicoArray","blocosPorUsina","formatDateForWhatsApp","date","generateConsolidatedDailyReportWhatsApp","clustersComRelatorios","allData","message","clustersOrdenados","sort","a","b","localeCompare","forEach","clusterData","clusterIndex","repeat","toUpperCase","tecnicosDoCluster","Set","add","tecnicoId","nomesTecnicos","Array","from","tecnicos","find","t","id","atividadesPorUsina","usinas","u","usinaId","Object","keys","atividadesUnicas","atividadesVistas","chave","has","validateDataForWhatsApp","type","errors"],"sources":["/home/thiagoriva/Documents/Projects/daily-report/src/utils/whatsappGenerator.js"],"sourcesContent":["import { format } from 'date-fns';\n\n// Gerar relatório diário de atividades\nexport const generateDailyReportWhatsApp = ({ \n  cluster, \n  data, \n  tecnico, \n  usina, \n  atividades, \n  tcuComFalha, \n  observacoesGerais \n}) => {\n  const dataFormatada = format(new Date(data), 'dd/MM/yyyy');\n  \n  // Gerar linhas de atividades numeradas\n  const linhasAtividades = atividades\n    .map((atividade, index) => {\n      const inicio = atividade.inicio || '--:--';\n      const fim = atividade.fim || '--:--';\n      const usinaInfo = atividade.usinaName && usina === 'Múltiplas Usinas' ? ` (${atividade.usinaName})` : '';\n      return `${index + 1}) ${atividade.tarefa}${usinaInfo} – ⏰ ${inicio}/${fim}`;\n    })\n    .join('\\n');\n\n  // Gerar observações\n  const observacoes = observacoesGerais.trim() || '-';\n\n  // Gerar status de TCU\n  let statusTCU = 'NÃO';\n  if (tcuComFalha.tem && tcuComFalha.falhas.length > 0) {\n    const falhasTexto = tcuComFalha.falhas\n      .filter(falha => falha.skid || falha.tracker)\n      .map(falha => {\n        const partes = [];\n        if (falha.skid) partes.push(`Skid: ${falha.skid}`);\n        if (falha.tracker) partes.push(`Tracker: ${falha.tracker}`);\n        return partes.join(' - ');\n      })\n      .join(', ');\n    \n    statusTCU = falhasTexto ? `SIM – ${falhasTexto}` : 'SIM';\n  }\n\n  return `🔆 *Relatório Diário ${cluster} – ${dataFormatada}*\n👷 Equipe: ${tecnico}\n📍 Usina: ${usina}\n\n🔧 *Atividades Programadas*\n${linhasAtividades}\n\n📌 *Observações*\n${observacoes}\n\n⚡ *TCU com falha*\n${statusTCU}`;\n};\n\n// Gerar status técnico por usina\nexport const generateTechnicalStatusWhatsApp = ({ \n  usina, \n  data, \n  cluster, \n  tecnico, \n  inversores, \n  strings, \n  trackers, \n  observacoesGerais \n}) => {\n  const dataFormatada = format(new Date(data), 'dd/MM/yyyy');\n  \n  // Função auxiliar para gerar status de subsistema\n  const gerarStatusSubsistema = (subsistema, nome) => {\n    const status = subsistema.ok100 ? 'SIM' : 'NÃO';\n    let detalhes = '';\n    \n    if (!subsistema.ok100 && (subsistema.motivo || subsistema.acaoPrevista)) {\n      const partes = [];\n      if (subsistema.motivo) partes.push(`Motivo: ${subsistema.motivo}`);\n      if (subsistema.acaoPrevista) partes.push(`Ação: ${subsistema.acaoPrevista}`);\n      detalhes = `\\n${partes.join('. ')}`;\n    }\n    \n    return `🔧 *${nome}*: ${status}${detalhes}`;\n  };\n\n  const observacoes = observacoesGerais.trim() || '-';\n\n  return `📍 *${usina}* – ${dataFormatada} – ${cluster}\n👷 Técnico: ${tecnico}\n\n${gerarStatusSubsistema(inversores, 'Inversores')}\n\n${gerarStatusSubsistema(strings, 'Strings')}\n\n${gerarStatusSubsistema(trackers, 'Trackers')}\n\n📝 Observações: ${observacoes}`;\n};\n\n// Gerar status técnico consolidado por cluster\nexport const generateConsolidatedTechnicalStatusWhatsApp = (statusTecnicoArray, cluster, data) => {\n  const dataFormatada = format(new Date(data), 'dd/MM/yyyy');\n  \n  const blocosPorUsina = statusTecnicoArray\n    .map(status => generateTechnicalStatusWhatsApp(status))\n    .join('\\n\\n');\n\n  return `🗂️ *Status Técnico – ${cluster} – ${dataFormatada}*\n\n${blocosPorUsina}`;\n};\n\n// Função auxiliar para formatar data\nexport const formatDateForWhatsApp = (date) => {\n  return format(new Date(date), 'dd/MM/yyyy');\n};\n\n// Gerar relatório diário consolidado de todos os clusters\nexport const generateConsolidatedDailyReportWhatsApp = (data, clustersComRelatorios, allData) => {\n  const dataFormatada = format(new Date(data), 'dd/MM/yyyy');\n  \n  let message = `📋 *Relatório Diário Consolidado – ${dataFormatada}*\\n\\n`;\n  \n  // Ordenar clusters por nome\n  const clustersOrdenados = clustersComRelatorios\n    .sort((a, b) => a.cluster.nome.localeCompare(b.cluster.nome));\n  \n  clustersOrdenados.forEach((clusterData, clusterIndex) => {\n    const { cluster, atividades } = clusterData;\n    \n    // Separador entre clusters (exceto o primeiro)\n    if (clusterIndex > 0) {\n      message += '\\n' + '─'.repeat(40) + '\\n\\n';\n    }\n    \n    message += `🔆 *${cluster.nome.toUpperCase()}*\\n`;\n    \n    // Buscar todos os técnicos únicos do cluster\n    const tecnicosDoCluster = new Set();\n    atividades.forEach(atividade => {\n      tecnicosDoCluster.add(atividade.tecnicoId);\n    });\n    \n    const nomesTecnicos = Array.from(tecnicosDoCluster)\n      .map(tecnicoId => {\n        const tecnico = allData.tecnicos.find(t => t.id === tecnicoId);\n        return tecnico?.nome || 'Técnico Desconhecido';\n      })\n      .join(' / ');\n    \n    message += `👷 Equipe: ${nomesTecnicos}\\n`;\n    \n    // Agrupar atividades por usina\n    const atividadesPorUsina = {};\n    atividades.forEach(atividade => {\n      const usina = allData.usinas.find(u => u.id === atividade.usinaId);\n      const usinaName = usina?.nome || 'Usina Desconhecida';\n      \n      if (!atividadesPorUsina[usinaName]) {\n        atividadesPorUsina[usinaName] = [];\n      }\n      atividadesPorUsina[usinaName].push(atividade);\n    });\n    \n    // Listar atividades por usina (sem separação por técnico)\n    Object.keys(atividadesPorUsina).forEach(usinaName => {\n      message += `\\n📍 *${usinaName}*\\n`;\n      \n      // Consolidar todas as atividades da usina (sem duplicatas)\n      const atividadesUnicas = [];\n      const atividadesVistas = new Set();\n      \n      atividadesPorUsina[usinaName].forEach(atividade => {\n        const chave = `${atividade.tarefa}-${atividade.inicio}-${atividade.fim}`;\n        if (!atividadesVistas.has(chave)) {\n          atividadesVistas.add(chave);\n          atividadesUnicas.push(atividade);\n        }\n      });\n      \n      // Ordenar por horário e numerar\n      atividadesUnicas\n        .sort((a, b) => a.inicio.localeCompare(b.inicio))\n        .forEach((atividade, index) => {\n          const inicio = atividade.inicio || '--:--';\n          const fim = atividade.fim || '--:--';\n          message += `${index + 1}) ${atividade.tarefa} – ⏰ ${inicio}/${fim}\\n`;\n        });\n    });\n  });\n  \n  return message.trim();\n};\n\n// Função auxiliar para validar dados antes de gerar mensagem\nexport const validateDataForWhatsApp = (data, type) => {\n  const errors = [];\n  \n  if (!data.cluster) errors.push('Cluster é obrigatório');\n  if (!data.data) errors.push('Data é obrigatória');\n  if (!data.usina) errors.push('Usina é obrigatória');\n  if (!data.tecnico) errors.push('Técnico é obrigatório');\n  \n  if (type === 'daily' && (!data.atividades || data.atividades.length === 0)) {\n    errors.push('Pelo menos uma atividade é obrigatória');\n  }\n  \n  if (type === 'technical' && (!data.inversores || !data.strings || !data.trackers)) {\n    errors.push('Status de todos os subsistemas é obrigatório');\n  }\n  \n  return errors;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}